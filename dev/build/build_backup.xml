<project name="adminui" default="compile" xmlns:sonar="antlib:org.sonar.ant">

	<property name="pack.version" value="5-0-0" />
	<property name="pack.name" value="AdminUI" />
	
	<property name="3pp.dir" value="/proj/eiffel013_config_fem6s11/3pp"/>	
	<!-- Attention! pack.dir have to be under tmp-dir because the actual build is done there -->
	<property name="pack.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/admin_ui/dev" />
	<property name="project.home" value="${pack.dir}" />

	<!-- ENIQ Jars -->
	<property name="eniq.engine.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/engine/build/engine/" />
	<property name="eniq.repository.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/repository/build/repository/" />
	<property name="eniq.scheduler.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/scheduler/build/scheduler/" />
	<property name="eniq.licensing.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/licensing/build/licensing/" />
	<property name="eniq.afj_manager.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/afj_manager/build/afj_manager/" />
	<property name="eniq.common_utilities.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/common_utilities/build/common_utilities/" />
	<property name="eniq.symboliclinkcreator.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/symboliclinkcreator/build/symboliclinkcreator/" />

	<!-- 3PP Jars -->
	<property name="3pp.jdk_i386.dir" value="${3pp.dir}/java_sun/jdk_x86/v1_8_0_281/prod"/>
	<property name="3pp.commons_configuration.dir" value="${3pp.dir}/apache/configuration/v1_1/prod" />
	<property name="3pp.commons_dbcp.dir" value="${3pp.dir}/apache/dbcp/v2_1_1/prod" />
	<property name="3pp.commons_lang.dir" value="${3pp.dir}/apache/comm_lang/v3_7/prod" />
	<property name="3pp.commons_logging.dir" value="${3pp.dir}/apache/comm_logging/v1_2/prod" />
	<property name="3pp.sybase.dir" value="${3pp.dir}/sybase/sybase_iq/" />
	<!-- jconn4.jar -->
	<property name="3pp.log4j.dir" value="${3pp.dir}/apache/log4j/v2_17_1/prod" />
	<property name="3pp.velocity.dir" value="${3pp.dir}/apache/jakarta_velocity/v1_7/prod" />
	<property name="3pp.servlet.dir" value="${3pp.dir}/apache/tomcat/v8_5_70/prod" />
	<property name="3pp.junit.dir" value="${3pp.dir}/junit/v4_5/prod" />
	<!-- junit.jar -->
	<property name="3pp.jsch.dir" value="${3pp.dir}/jsch_ssh2/jsch_ssh2/v0_1_54/prod/" />
	<!-- jsch.jar -->

	<target name="precompile" />

	<target name="compile" depends="create_war" />
	<!--====================================================================
 	 Task: create_war
	=====================================================================-->
	<target name="create_war" depends="compile_java">
		<!-- Copy resources to classpath root -->
		<copy todir="${project.home}/classes">
			<fileset dir="${project.home}/web/conf">
				<include name="general.properties" />
			</fileset>
		</copy>

		<war destfile="${project.home}/install/adminui.war" webxml="${project.home}/web/WEB-INF/web.xml">
			<classes dir="${project.home}/classes" />
			<fileset dir="${project.home}/web">
				<exclude name="WEB-INF/web.xml" />
				<exclude name="conf/general.properties" />
			</fileset>
		</war>
	</target>

	<target name="compile_java">
		<delete dir="${project.home}/classes" />
		<mkdir dir="${project.home}/classes" />
		<javac srcdir="${project.home}/src" destdir="${project.home}/classes" failonerror="true" debug="true" optimize="off" deprecation="off">
<compilerarg value="-Xlint:all" />
<compilerarg line="-Xmaxwarns 1000" />
			<classpath>
				<pathelement path="${classpath}" />
				<fileset dir="${eniq.engine.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${eniq.repository.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${eniq.scheduler.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${eniq.licensing.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${eniq.afj_manager.dir}">
					<include name="afj_manager.jar" />
				</fileset>
				<fileset dir="${eniq.common_utilities.dir}">
					<include name="common.jar" />
				</fileset>
				<fileset dir="${eniq.symboliclinkcreator.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.commons_configuration.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.commons_dbcp.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.commons_lang.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.commons_logging.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.sybase.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.log4j.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.velocity.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.servlet.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.junit.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${3pp.jsch.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!--====================================================================
 	 Task: create_zip
	=====================================================================-->
	<!--<target name="create_zip" depends="create_war">
  		<zip destfile="${project.home}/build/${pack.name}_${build.number}.zip">
	    <fileset dir="${project.home}/build/" includes="adminui.war"/>
		</zip>
	</target>	
	-->
	<target name="postcompile" />

    <!-- ========= Define the main properties of this project ========= -->
    <property name="src.dir" value="src" />
    <property name="build.dir" value="target" />
    <property name="classes.dir" value="${build.dir}/classes" />

     <!-- Define the SonarQube global properties (the most usual way is to pass these properties via the command line) -->
     <property name="sonar.host.url" value="https://sonarqube.lmera.ericsson.se" />

     <!-- Define the Sonar properties -->
     <property name="sonar.projectKey" value="sonarqube-scanner-adminui" />
     <property name="sonar.projectName" value="Eniq AdminUI" />
     <property name="sonar.projectVersion" value="1.0" />
     <property name="sonar.sources" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/admin_ui/dev/src" />
     <property name="sonar.java.binaries" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/admin_ui/dev" />
     <property name="sonar.sourceEncoding" value="UTF-8" />
     <property name="sonar.login" value="b140730794b2b53dc841840498358c11213d3ba9" />
     <property name="sonar.projectBaseDir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_AdminUI_build/admin_ui/dev/" />

     <!-- ========= Define "regular" targets: clean, compile, ... ========= -->
     <target name="compile_sonar">
         <javac srcdir="${project.home}/src" destdir="${project.home}/classes" fork="true" debug="true" includeAntRuntime="false" />
     </target>

     <!-- ========= Define SonarQube Scanner for Ant Target ========= -->
     <target name="sonar">
         <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
             <!-- Update the following line, or put the "sonar-ant-task-*.jar" file in your "$HOME/.ant/lib" folder -->
             <classpath path="/proj/esjkadm100/Sonar/sonarqube-ant-task-2.7.0.1612.jar" />
         </taskdef>

         <!-- Execute SonarQube Scanner for Ant Analysis -->
         <sonar:sonar />
     </target>
    <target name="clean">
        <delete dir="${pack.dir}/classes"/>
    </target>


     <!-- ========= The main target "all" ========= -->
     <target name="all_sonar" depends="sonar,clean" />



<target name="sonarQualityCheck" description="SonarQube Quality Gate check"> 
	 <exec executable="/bin/sh" outputproperty="qualitySleep"> 
		 <arg value="-c" /> 
		 <arg value="sleep 60" /> 
	 </exec>
	<exec executable="curl" outputproperty="sonarreturnCode">
		<arg value="-o" />
		<arg value="/proj/esjkadm100/Sonar/sonarOut.txt" />
		<arg value="-k" />
        <arg value="-u" />
        <arg value="${sonar.login}:" />
        <arg value="https://sonarqube.lmera.ericsson.se/api/qualitygates/project_status?projectKey=${sonar.projectKey}" />
    </exec>
    <exec executable="/bin/sh" outputproperty="sonarCode">
        <arg value="-c" />
        <arg value="/proj/eiffel013_config_fem6s11/tools/sonarQualityGateCheck.sh" />
    </exec>
    <echo message="Quality report returned ${sonarCode}"/>
    <condition property="qualityMatch">
        
            <equals arg1="${sonarCode}" arg2="ERROR"/>
        
    </condition>
    <fail if="qualityMatch" message="Quality check did not pass, hence marking build as failed!!!."/>
</target>

</project>
